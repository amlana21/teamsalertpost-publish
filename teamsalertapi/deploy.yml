apiVersion: v1
data:
  .dockerconfigjson: <base64_encoded>
kind: Secret
metadata:
  name: apisecret
type: kubernetes.io/dockerconfigjson

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: teamsalertapi
  labels:
    app: teamsalertapi
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: teamsalertapi
  template:
    metadata:
      labels:
        app: teamsalertapi
    spec:
      imagePullSecrets:
      - name: apisecret
      containers:
      - name: teamsalertapi
        image: <image_url>
        ports:
        - name: web
          containerPort: 5000
        env:
        - name: ACCESSKEY_ID
          value: <access_key>
        - name: SECRETKEY
          value: <secret_key>
        - name: DDB_TABLE_NAME
          value: <tbl_name>
        - name: TEAMS_WEB_HOOK_URL
          value: <hook_url>
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: apilb
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: <acm_cert_arn>
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
  labels:
    app: teamsalertapi
    # WorkerType: fargate
spec:
  type: LoadBalancer
  selector:
    app: teamsalertapi
    # WorkerType: fargate
  ports:
    - targetPort: 5000
      port: 80
      name: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: 5000

---

apiVersion: v1
kind: Service
metadata:
  name: apiclusterip
  labels:
    app: teamsalertapi
    # WorkerType: fargate
spec:
  selector:
    app: teamsalertapi
    # WorkerType: fargate
  ports:
    - targetPort: 5000
      port: 80
      name: http
