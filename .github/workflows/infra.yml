name: Deploy Infra for Teams alert api

on:
  push:
    branches:
    - main

env:
  RUN_DESTROY: N
  RUN_PIPELINE: N

jobs:
  create_s3:
    name: Create S3 bucket for Terraform state

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION}}
    - name: Create S3 bucket
      run: |
        aws s3 mb s3://<bucket_name>

  run_terraform_plan:
    name: Run Terraform Plan
    runs-on: ubuntu-latest
    needs: create_s3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION}}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      id: init
      run: |
        cd terraform_modules
        terraform init
    - name: Terraform Plan
      id: plan
      run: |
        cd terraform_modules
        terraform plan -no-color -input=false
      continue-on-error: true
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  run_terraform:
    name: Run Terraform
    runs-on: ubuntu-latest
    needs: [create_s3, run_terraform_plan]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION}}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      id: init
      run: |
        cd terraform_modules
        terraform init
    - name: Terraform Plan
      id: plan
      run: |
        cd terraform_modules
        terraform plan -no-color -input=false
      continue-on-error: true
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    - name: Terraform Apply
      run: |
        cd terraform_modules
        terraform apply -auto-approve -input=false


  deploy_harness_delegate:
    name: Deploy Harness Delegate
    runs-on: ubuntu-latest
    needs: [create_s3, run_terraform_plan,run_terraform]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION}}
    - name: Install and configure kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
            --progress-bar \
            --location \
            --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    - name: Configure AWS EKS Credentials
      run: |
        aws eks update-kubeconfig --name <cluster_name>
    - name: Test Kubectl
      run: |
        kubectl get nodes
    - name: Deploy Delegate
      run: |
        cd infra_yamls
        kubectl apply -f harness.yml


  deploy_prometheus_grafana:
    name: Deploy Prometheus and Grafana
    runs-on: ubuntu-latest
    needs: [create_s3, run_terraform_plan,run_terraform]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION}}
    - name: Install and configure helm
      run: |
        curl https://get.helm.sh/helm-v3.9.0-rc.1-linux-amd64.tar.gz \
            --progress-bar \
            --location \
            --remote-name
        tar -zxvf helm-v3.9.0-rc.1-linux-amd64.tar.gz
        chmod +x linux-amd64/helm
        sudo mv linux-amd64/helm /usr/local/bin/helm
        helm version
    - name: Deploy Prometheus and Grafana Stack
      run: |
        aws eks update-kubeconfig --name <cluster_name>
        cd infra_yamls/helm_prometheus
        kubectl apply -f namespace.yml
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts 
        helm repo add stable https://charts.helm.sh/stable
        helm repo update
        helm install prometheus -f values.yml prometheus-community/kube-prometheus-stack --version 32.2.1
        kubectl apply -f services.yml